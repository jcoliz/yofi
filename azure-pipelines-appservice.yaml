# Build and test ASP.NET Core projects targeting .NET Core within Azure DevOps (https://dev.azure.com)
# Release to Azure App Services
# Additional inforamtion: https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core
#
# REQUIRES defining variables via Azure DevOps Pipelines > Pipelines > (select pipeline) > Edit > Variables.
#   azureSubscription: Azure DevOps Connection Name via Project Settings > Service connections
#   azureAppServiceName: Azure App Service Name

trigger:
  branches:
    include:
    - master
    - release/*
    - hotfix/*

pr: none

variables:
  application: YoFi.AspNet
  tests: YoFi.Tests
  inttests: YoFi.Tests.Integration
  functests: YoFi.Tests.Functional
  azureAgent: 'ubuntu-latest'
  artifactFolder: 'drop'

stages:
- stage: Build
  displayName: 'Build Stage'

  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(azureAgent)

    steps:
    - checkout: self
      submodules: true

    - task: CmdLine@2
      displayName: 'Create version.txt'
      inputs:
        script: 'git describe --long --always --abbrev=8 > $(application)/version.txt'

    - task: CmdLine@2
      displayName: 'Create release.txt'
      inputs:
        script: 'git describe --tags > $(application)/release.txt'

    - task: DotNetCoreCLI@2
      displayName: 'Publish web app'
      inputs:
        command: 'publish'
        publishWebProjects: true
        arguments: '--output $(System.DefaultWorkingDirectory)/publish_output --configuration Release'
        zipAfterPublish: false
        modifyOutputPath: false

    - task: DotNetCoreCLI@2
      displayName: 'Build Functional Tests'
      inputs:
        command: 'build'
        projects: '$(functests)/$(functests).csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Run unit tests'
      inputs:
        command: 'test'
        projects: '$(tests)/$(tests).csproj'
        arguments: '--collect:"XPlat Code Coverage" --settings:$(tests)/coverlet.runsettings'

    - task: DotNetCoreCLI@2
      displayName: 'Run integration tests'
      inputs:
        command: 'test'
        projects: '$(inttests)/$(inttests).csproj'

    - task: PublishCodeCoverageResults@1
      displayName: 'Publish code coverage'
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: '$(Agent.TempDirectory)/*/coverage.cobertura.xml'

    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/publish_output'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true

    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      artifact: $(artifactFolder)

- stage: Deploy
  displayName: 'Release Stage'
  dependsOn: Build
  condition: succeeded()

  jobs:
  - deployment: Deploy
    displayName: 'Deploy Website'
    environment: 'YoFi'
    pool:
      vmImage: $(azureAgent)

    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Web App'
            inputs:
              azureSubscription: '$(azureSubscription)'
              appName: '$(azureAppServiceName)'
              package: '$(Pipeline.Workspace)/$(artifactFolder)/*.zip'
              deploymentMethod: 'zipDeploy'
